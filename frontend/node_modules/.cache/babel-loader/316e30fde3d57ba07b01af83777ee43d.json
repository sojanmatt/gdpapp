{"ast":null,"code":"var _jsxFileName = \"/Users/mathewsojan/SoftwareEngineering/Internship/LAM/gdpApp/gdpapp/Frontend/src/components/Chart/Chart.jsx\";\nimport React, { Component } from \"react\";\nimport { scaleBand, scaleLinear } from \"d3-scale\";\nimport Axes from \"../Axes\";\nimport Bars from \"../Bars\";\nimport ResponsiveWrapper from \"../ResponsiveWrapper\";\nimport axios from \"axios\";\nimport * as Constants from \"../../Helpers/helper\";\n\nclass Chart extends Component {\n  constructor() {\n    super();\n    this.xScale = scaleBand();\n    this.yScale = scaleLinear();\n    this.state = {\n      showGraph: false\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      let rooturl = Constants.rooturl;\n      let response = await axios.get(rooturl); //console.log(\"res\", response.data);\n\n      const margins = {\n        top: 50,\n        right: 20,\n        bottom: 100,\n        left: 60\n      };\n      const maxValue = Math.max(...response.data[1].map(d => d.value)); //   console.log(\"maxValue\", maxValue);\n\n      const svgDimensions = {\n        width: Math.max(this.props.parentWidth, 1300),\n        height: 500\n      };\n      const xScale = this.xScale.padding(0.5).domain(response.data[1].map(d => d.date).reverse()).range([margins.left, svgDimensions.width - margins.right]);\n      const yScale = this.yScale.domain([0, maxValue / 1000000000000]).range([svgDimensions.height - margins.bottom, margins.top]);\n      this.setState({\n        data: response.data[1],\n        xScale: xScale,\n        yScale: yScale,\n        maxValue: maxValue,\n        showGraph: true\n      });\n    } catch (error) {}\n  }\n\n  render() {\n    let showAxes = null;\n    let showBars = null;\n    const margins = {\n      top: 50,\n      right: 20,\n      bottom: 100,\n      left: 60\n    };\n    const svgDimensions = {\n      width: Math.max(this.props.parentWidth, 1000),\n      height: 500\n    };\n\n    if (this.state.showGraph === true) {\n      const _this$state = this.state,\n            xScale = _this$state.xScale,\n            yScale = _this$state.yScale,\n            maxValue = _this$state.maxValue,\n            data = _this$state.data;\n      console.log(\"yScale\", data);\n      showAxes = React.createElement(Axes, {\n        scales: {\n          xScale,\n          yScale\n        },\n        margins: margins,\n        svgDimensions: svgDimensions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      });\n      showBars = React.createElement(Bars, {\n        scales: {\n          xScale,\n          yScale\n        },\n        margins: margins,\n        data: data,\n        maxValue: maxValue,\n        svgDimensions: svgDimensions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"svg\", {\n      width: svgDimensions.width,\n      height: svgDimensions.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, showAxes, showBars, React.createElement(\"text\", {\n      x: \"20\",\n      y: \"40\",\n      fontFamily: \"sans-serif\",\n      fontSize: \"8\",\n      fill: \"black\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"GDP (in Trillions)\"), React.createElement(\"text\", {\n      x: \"40\",\n      y: \"450\",\n      fontFamily: \"sans-serif\",\n      fontSize: \"8\",\n      fill: \"black\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Years\"));\n  }\n\n}\n\nexport default ResponsiveWrapper(Chart);","map":{"version":3,"sources":["/Users/mathewsojan/SoftwareEngineering/Internship/LAM/gdpApp/gdpapp/Frontend/src/components/Chart/Chart.jsx"],"names":["React","Component","scaleBand","scaleLinear","Axes","Bars","ResponsiveWrapper","axios","Constants","Chart","constructor","xScale","yScale","state","showGraph","componentDidMount","rooturl","response","get","margins","top","right","bottom","left","maxValue","Math","max","data","map","d","value","svgDimensions","width","props","parentWidth","height","padding","domain","date","reverse","range","setState","error","render","showAxes","showBars","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { scaleBand, scaleLinear } from \"d3-scale\";\n\nimport Axes from \"../Axes\";\nimport Bars from \"../Bars\";\nimport ResponsiveWrapper from \"../ResponsiveWrapper\";\nimport axios from \"axios\";\nimport * as Constants from \"../../Helpers/helper\";\nclass Chart extends Component {\n  constructor() {\n    super();\n    this.xScale = scaleBand();\n    this.yScale = scaleLinear();\n    this.state = {\n      showGraph: false\n    };\n  }\n  async componentDidMount() {\n    try {\n      let rooturl = Constants.rooturl;\n      let response = await axios.get(rooturl);\n      //console.log(\"res\", response.data);\n      const margins = { top: 50, right: 20, bottom: 100, left: 60 };\n      const maxValue = Math.max(...response.data[1].map(d => d.value));\n      //   console.log(\"maxValue\", maxValue);\n      const svgDimensions = {\n        width: Math.max(this.props.parentWidth, 1300),\n        height: 500\n      };\n\n      const xScale = this.xScale\n        .padding(0.5)\n        .domain(response.data[1].map(d => d.date).reverse())\n        .range([margins.left, svgDimensions.width - margins.right]);\n\n      const yScale = this.yScale\n        .domain([0, maxValue / 1000000000000])\n        .range([svgDimensions.height - margins.bottom, margins.top]);\n      this.setState({\n        data: response.data[1],\n        xScale: xScale,\n        yScale: yScale,\n        maxValue: maxValue,\n        showGraph: true\n      });\n    } catch (error) {}\n  }\n  render() {\n    let showAxes = null;\n    let showBars = null;\n    const margins = { top: 50, right: 20, bottom: 100, left: 60 };\n    const svgDimensions = {\n      width: Math.max(this.props.parentWidth, 1000),\n      height: 500\n    };\n\n    if (this.state.showGraph === true) {\n      const { xScale, yScale, maxValue, data } = this.state;\n      console.log(\"yScale\", data);\n      showAxes = (\n        <Axes\n          scales={{ xScale, yScale }}\n          margins={margins}\n          svgDimensions={svgDimensions}\n        />\n      );\n      showBars = (\n        <Bars\n          scales={{ xScale, yScale }}\n          margins={margins}\n          data={data}\n          maxValue={maxValue}\n          svgDimensions={svgDimensions}\n        />\n      );\n    }\n    return (\n      <svg width={svgDimensions.width} height={svgDimensions.height}>\n        {showAxes}\n        {showBars}\n        <text x=\"20\" y=\"40\" fontFamily=\"sans-serif\" fontSize=\"8\" fill=\"black\">\n          GDP (in Trillions)\n        </text>\n        <text x=\"40\" y=\"450\" fontFamily=\"sans-serif\" fontSize=\"8\" fill=\"black\">\n          Years\n        </text>\n      </svg>\n    );\n  }\n}\n\nexport default ResponsiveWrapper(Chart);\n"]},"metadata":{},"sourceType":"module"}